<?php
//$Id: product_price_alterer_field.module,v 1.16 2009/08/22 21:30:39 ryangroe Exp $


/**
 * See http://drupal.org/node/106716 for more information.
 */

/**
 * Implementation of hook_field_info().
 */
function product_price_alterer_field_field_info() {
  return array(
    "discounted_price" => array(
      "label" => t("Discounted Price"),
      "description" => t("Alters price for products where uc_discounts_alt discounts apply when added with a quantity of one or less"),
    ),
  );
}

/**
 * Implementation of hook_content_is_empty().
 */
function product_price_alterer_field_content_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implementation of hook_widget_info().
 */
function product_price_alterer_field_widget_info() {
  return array(
    "discounted_price" => array(
      "label" => "Default Display",
      "field types" => array("discounted_price"),
      "multiple values" => CONTENT_HANDLE_CORE,
      "callbacks" => array(
        "default value" => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function product_price_alterer_field_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    "#type" => $field["widget"]["type"],
    "#default_value" => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function product_price_alterer_field_field_formatter_info() {
  return array(
    "default" => array(
      "label" => "Discounted Price",
      "field types" => array("discounted_price"),
    ),
  );
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_product_price_alterer_field_formatter_default($element) {
  return $element["#item"]["discounted_price"];
}

/**
 * Implementation of hook_field()
 */
function product_price_alterer_field_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case "sanitize":
    case "view":
      //If items is empty, generate value by getting discounts that apply to this product
      if (empty($items)) {
        $discounted_price = theme("get_discounted_price", $node);
        if (!is_null($discounted_price)) {
          //Add field for discounted price
          $item = array();
          $item["discounted_price"] = theme("product_discounted_price", $node, uc_currency_format($discounted_price));
          $items[] = $item;

          //Add css to page
          theme("add_product_price_altering_css", $node);

          //Add javascript to page
          theme("add_product_price_altering_javascript", $node);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function product_price_alterer_field_theme() {
  return array(
    "product_price_alterer_field_formatter_default" => array(
      "arguments" => array("element" => NULL),
    ),
    "get_discounted_price" => array(
      "arguments" => array("product"),
    ),
    "product_discounted_price" => array(
      "arguments" => array("product", "discounted_price"),
    ),
    "add_product_price_altering_css" => array(
      "arguments" => array("product"),
    ),
    "add_product_price_altering_javascript" => array(
      "arguments" => array("product"),
    ),
  );
}

/**
 * Theme function for producing product discounted price html.
 */
function theme_get_discounted_price($product) {
  //Determine discounts that apply to product when ordering a quantity of 1 or less
  $discounts = get_codeless_discounts_for_product_and_quantity($product, 1);
  if (empty($discounts)) {
    return NULL;
  }

  //Sum discount amounts
  $total_discount_amount = 0;
  foreach ($discounts as $discount) $total_discount_amount += $discount->amount;
  return $product->sell_price - $total_discount_amount;
}

/**
 * Theme function for producing product discounted price html.
 * Returns discounted price for product (based on passed discounts).
 */
function theme_product_discounted_price($product, $discounted_price_string) {
  return $discounted_price_string;
}

/**
 * Theme function for writing css to product page.
 */
function theme_add_product_price_altering_css($product) {
  global $product_price_alterer_field_css_added;
  if (empty($product_price_alterer_field_css_added)) {
    $product_price_alterer_field_css_added = TRUE;

    drupal_add_css(drupal_get_path("module", "product_price_alterer_field") ."/product_price_alterer_field.css"
    );
  }
}

/**
 * Theme function for writing javascript to product page.
 */
function theme_add_product_price_altering_javascript($product) {
  global $product_price_alterer_field_javascript_added;
  if (empty($product_price_alterer_field_javascript_added)) {
    $product_price_alterer_field_javascript_added = TRUE;

    //Alter price using javascript
    drupal_add_js("$(document).ready(function()
			{
				$(\".views-field-discounted-price\").each(function()
					{
						var self = $(this);
						var content = self.find(\".field-content:first\");
						if ( (content.size() > 0) && ($.trim( content.html() ).length == 0) )
							return true;
						else if ($.trim( self.html() ).length == 0)
							return true;

						self.parent().find(\".views-field-sell-price:not(th)\")
							.addClass(\"original-sell-price\");
					});
				$(\".uc-price-sell:not(.original-sell-price)\").each(function()
					{
						var self = $(this);
						self.addClass(\"original-sell-price\")
							.after(	$( \".field-type-discounted-price:first\", self.parent() )	);
					});
				//Legacy
				$(\".sell-price:not(.original-sell-price)\").each(function()
					{
						var self = $(this);
						self.addClass(\"original-sell-price\")
							.after(	$( \".field-type-discounted-price:first\", self.parent() )	);
					});
			});", "inline");
  }
}

/**
 * Implementation of hook_views_data()
 * Register all of the basic handlers views uses.
 */
function product_price_alterer_field_views_data() {
  $data["uc_products"]["discounted_price"] = array(
    "title" => t("Discounted price"),
    "help" => t("Price after discounts (if any exist)."),
    "real field" => "sell_price",
    "argument" => array(
      "handler" => "views_handler_argument_numeric",
    ),
    "field" => array(
      "handler" => "discounted_price_handler",
      "click sortable" => FALSE,
    ),
  );

  return $data;
}

/**
 * Implementation of hook_views_handlers()
 * Register all of the basic handlers views uses.
 */
function product_price_alterer_field_views_handlers() {
  return array(
    "info" => array(
      "path" => drupal_get_path("module", "product_price_alterer_field"),
    ),
    "handlers" => array(
      "discounted_price_handler" => array(
        "parent" => "views_handler_field_numeric",
      ),
    ),
  );
}

