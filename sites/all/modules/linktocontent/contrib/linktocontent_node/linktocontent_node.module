<?php
// $Id: linktocontent_node.module,v 1.3 2007/10/08 15:18:09 stborchert Exp $

/*
* @file
* Linktocontent Node Module for Drupal 6.x (patched for FCKeditor)
*/

/**
 * Implementation of hook_theme().
 */
function linktocontent_node_theme() {
  return array(
    'linktocontent_node_settings_page' => array(
      'arguments' => array('form' => NULL),
      'file' => 'linktocontent_node.theme',
    ),
  );
}

/**
 * Implementation of hook_menu()
 *
 * @ingroup linktocontent_node_core
 */
function linktocontent_node_menu() {
  $items['admin/settings/linktocontent/linktocontent_node'] = array(
    // @todo
    'title' => 'Link to node',
    'description' => 'Configure relevant settings for Link to node.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linktocontent_node_settings_page'),
    'access arguments' => array('administer linktocontent'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback; Prints the settings page under admin/settings/linktocontent
 *
 * @ingroup linktocontent_node_callback
 */
function linktocontent_node_settings_page() {
  $content_types = node_get_types();
  $status = variable_get('linktocontent_node_content_types', array());
  $options = array();
  foreach ($content_types as $key => $info) {
    $options[$key] = '';
    $form['name'][$key] = array('#value' => $info->name);
  }
  $options['term'] = '';
  $form['name']['term'] = array('#value' => t('Term'));
  if (!isset($status['term'])) {
    $status['term'] = '';
  }

  $form['status'] = array(
    '#type' => 'checkboxes',
    '#default_value' => $status,
    '#options' => $options);
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  return $form;
}

/**
 * Submit callback; handles form submission.
 */
function linktocontent_node_settings_page_submit($form, &$form_state) {
  $types = variable_get('linktocontent_node_content_types', array());
  foreach ($form_state['values']['status'] as $key => $choice) {
    $types[$key] = $choice;
  }
  variable_set('linktocontent_node_content_types', $types);
  drupal_set_message(t('The configuration has been saved.'));
}

/**
 * Collect some info about the plugin.
 *
 * @ingroup linktocontent_node_core
 * @return Object with plugin infos (title, description, ...)
 **/
function linktocontent_node_get_info() {
  $obj = new StdClass;
  $obj->info = array('title' => 'Link to node',
    'description' => 'Configure settings for Link to node.',
    'plugin' => 'linktonode');
  return $obj;
}

/**
 * Get the plugin description.
 *
 * @ingroup linktocontent_node_core
 * @return Plugin description
 **/
function linktocontent_node_get_description() {
  return t('Adds a plugin to your FCKeditor and TinyMCE profiles that allows you to browse through your taxonomy structure and insert links to nodes.');
}

/**
 * Validate the given arguments.
 *
 * @ingroup linktocontent_node_core
 * @return boolean Whether the arguments are valid or not.
 **/
function linktocontent_node_validate_args($args) {
  if (!isset($args['ltc-vocab-id']) || !is_numeric(check_plain($args['ltc-vocab-id']))) {
    return t('No valid vocabulary id given.');
  }
  return TRUE;
}

/**
 * Looks for popup.php in the tinymce plugin directory to check
 * for a correct installation of the plugin.
 *
 * @ingroup linktoconent_node_core
 * @return FALSE if the file isn't there; otherwise TRUE
 **/
function linktocontent_node_check_files() {
  $file = 'popup.php';
  $plugin_path = '/tinymce/jscripts/tiny_mce/plugins/linktonode/';
  $dir = drupal_get_path('module', 'tinymce');
  return file_exists($dir . $plugin_path . $file);
}

/**
 * Get the data depending on the given arguments.
 *
 * @ingroup linktocontent_node_core
 * @return Javascript array with all the data the tinymce plugin needs.
 **/
function linktocontent_node_get_data($args, $data = array()) {
  $vid = check_plain($args['ltc-vocab-id']);
  $tid = ((isset($args['ltc-term-id']) && is_numeric(check_plain($args['ltc-term-id'])))
    ? check_plain($args['ltc-term-id'])
    : 0);

  $data['categories'] = _linktocontent_node_get_categories($vid, $tid);
  $data['nodes'] = _linktocontent_node_get_nodes($vid, $tid);
  return $data;
}

/**
 * Find all subcategories of $parent in $container.
 *
 * @ingroup linktocontent_node_core
 */
function _linktocontent_node_get_categories($container = -1, $parent = 0) {
  $top = FALSE;
  if ($container <= 0) {
    $container = 0;
    $top = TRUE;
  }

  if (!module_exists('category')) {
    if ($container <= 0) {
      $containers = module_invoke('taxonomy', 'get_vocabularies');
    }
    else {
      $containers = module_invoke('taxonomy', 'get_tree', $container, $parent, -1, 1);
    }
  }
  else {
    $cid = $container;
    $obj = NULL;
    if ($parent > 0)
      $cid = $parent;
    $containers = array();
    $sql = db_rewrite_sql('SELECT c.cid, c.*, h.parent, n.title FROM {category} c INNER JOIN {category_hierarchy} h ON c.cid = h.cid INNER JOIN {node} n ON c.cid = n.nid LEFT JOIN {category} c2 ON h.parent = c2.cid WHERE h.parent = %d AND n.status = 1 AND n.moderate = 0 ORDER BY c.weight, n.title', 'n', 'nid');
    $result = db_query($sql, $cid);
    while ($category = db_fetch_object($result)) {
      $obj = new StdClass;
      $obj->vid = ($category->cnid == 0) ? $category->cid : $category->cnid;
      $obj->tid = $category->cid;
      $obj->name = $category->title;
      $containers[] = $obj;
    }
  }
  if (count($containers) == 0)
    return FALSE;

  $results = array();
  $obj = NULL;

  foreach ($containers as $item) {
    $obj = new StdClass;
    $obj->vid = $item->vid;
    $obj->tid = ($top ? $item->vid : $item->tid);
    $obj->title = (trim($item->name));
    $results[] = $obj;
  } // end foreach
  return $results;
}

function _linktocontent_node_get_nodes($container, $parent = -1) {
  $results = array();
  $types = variable_get('linktocontent_node_content_types', array());
  $nodes = _linktocontent_node_query_nodes(($container <= 0 ? -1 : $parent));
  $obj = NULL;
  while ($node = db_fetch_object($nodes)) {
    if (!isset($types[$node->type])
      || ($types[$node->type] !== $node->type))
      continue;

    $obj = new StdClass;
    $obj->nid = $node->nid;
    $obj->title = $node->title;
    $obj->date = format_date($node->changed, 'small');
    $obj->author = $node->name;
    $obj->type = $node->type;
    $obj->href = url('node/'. $node->nid);
    $obj->orig_href = 'node/'. $obj->nid;
    $results[$obj->orig_href] = $obj;
  } // while

  if ((isset($types['term'])) && ($types['term'] !== 0)) {
    // find terms
    $terms = module_invoke('taxonomy', 'get_tree', $container, $parent, -1, 2);
    $terms = _filter_terms($terms, (($parent > -1) ? $parent : $container));
    foreach ($terms as $item) {
      $obj = new StdClass;
      $obj->nid = $item->tid;
      $obj->title = (trim($item->name));
      $obj->date = '';
      $obj->author = '';
      $obj->type = 'term';
      $obj->href = url('taxonomy/term/'. $obj->nid);
      $obj->orig_href = 'taxonomy/term/'. $obj->nid;
      $results[$obj->orig_href] = $obj;
    } // end foreach
  }
  return $results;
}

function _linktocontent_node_query_nodes($tid) {
  $order = 'n.sticky DESC, n.created DESC';
  $descendant_tids = array();
  $term = taxonomy_get_term($tid);

  if (is_object($term)) {
    $tree = taxonomy_get_tree($term->vid, $tid, -1, 0);
    $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
  }
  else {
    $descendant_tids[] = array($tid);
  }

  $str_tids = implode(',', call_user_func_array('array_merge', $descendant_tids));
  $join = 'INNER JOIN';
  $where = 'tn.tid IN ('. $str_tids .')';
  if ($tid < 0) {
    $join = 'LEFT JOIN';
    $where = 'ISNULL(tn.tid)';
  }
  $sql = 'SELECT DISTINCT(n.nid), n.type, n.title, n.created, n.changed, n.sticky, u.name, tn.tid FROM {node} n INNER JOIN {users} u ON u.uid = n.uid ';
  $sql .= $join .' {term_node} tn ON n.nid = tn.nid WHERE '. $where .' AND n.status = 1 ORDER BY '. $order;

  $result = db_query(db_rewrite_sql($sql));

  return $result;
}

function _filter_terms($terms, $filter = 0) {
  $result = array();
  foreach ($terms as $key => $item) {
    if (in_array($filter, $item->parents)) {
      $result[$key] = $item;
    }
  }
  return $result;
}
