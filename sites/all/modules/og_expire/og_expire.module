<?php
// $Id: og_expire.module,v 1.1.2.1 2009/04/15 09:34:49 meba Exp $

/**
  * @file
  * Module allowing group administrators to set membership expiration date for
  * users. Provides API to other modules. See README.txt for more information.
  * Requires cron to actually expire memberships.
  *
  * Provides Views integration - expiration date field with optional Change
  * link for given user and organic group.
  *
  * All expired memberships are set to is_active = 0.
  */

/**
  * Implementation of hook_help().
  */
function og_expire_help($path, $arg) {
  switch ($path) {
    case 'admin/og/expire':
      $output = '<p>' . t('OG Expire module allows group administrators to set membership expiration dates for group members. Whenever you add member to the group, you can send an expiration date.') . '</p>';
      $output .= '<p>' . t('You can set a default expiration offset - default form value for expiration dates.') . '</p>';
      $output .= '<p>' . t('Users and administrators can receive emails prior to expiration') . '</p>';
      return $output;
  }
}

/**
  * Implementation of hook_menu().
  */
function og_expire_menu() {
  $items['og/expire/%node/%user'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('og_expire_change_form', 2, 3),
      'access callback' => 'og_is_group_admin',
      'access arguments' => array(2),
      'title callback' => 'og_expire_menu_title',
      'title arguments' => array(2, 3),
      );
  $items['admin/og/expire'] = array(
      'title' => 'Expiration dates',
      'description' => 'Configure default expiration dates.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('og_expire_configure'),
      'access arguments' => array('administer organic groups'),
      'file' => 'og_expire.admin.inc',
      );
  return $items;
}

function og_expire_menu_title($node, $account) {
    return t('Change @user expiration date for membership in @node', array('@user' => $account->name, '@node' => $node->title));
}

/**
  * Generate form item for expiration date - reusable. API function, should not
  * be used from outside.
  *
  * @param $offset
  *  Calculate new expiration value based on this unixtime.
  *
  * @return $form
  *  Form item.
  */
function _og_expire_form_item($offset = NULL) {
  if (!$offset) {
    $offset = time();
  }
  $form = array();
  $form['og_expire'] = array(
      '#type' => 'textfield',
      '#title' => t('Expiration date'),
      '#description' => t('Set expiration date. Format: %time. Leave blank to set unlimited expiration date.', array('%time' => format_date($offset + variable_get('og_expire_default_value', 31536000), 'small'))),
      '#default_value' => format_date($offset + variable_get('og_expire_default_value', 31536000), 'small'),
      '#weight' => -9,
      );
  return $form;
}
function og_expire_change_form($form_state, $node, $account) {
  /**
   * We don't allow the change if:
   *  - Current user is not group admin OR
   *  - Edited user is not a member of the group OR
   *  - Edited user is group admin.
   */
  if (!og_is_group_admin($node) || !in_array($node->nid, array_keys($account->og_groups)) || og_is_group_admin($node, $account)) {
    drupal_access_denied();
    return;
  }
  // Check if the user already has expiration date for this group.
  $existing = db_fetch_object(db_query("SELECT expire FROM {og_expire} WHERE nid = %d AND uid = %d", $node->nid, $account->uid));
  if ($existing) {
    $time = $existing->expire;
  }
  else {
    $time = time();
  }

  $form['node'] = array('#type' => 'value', '#value' => intval($node->nid));
  $form['account'] = array('#type' => 'value', '#value' => intval($account->uid));
  $form += _og_expire_form_item($time);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Change'));

  return $form;
}


/**
  * Implementation of hook_og().
  */
function og_expire_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user delete':
      // Delete user expiration date.
      og_expire_set($gid, $uid, NULL);
      break;
    case 'user approve':
      drupal_set_message(t('Do not forget to set expiration date for this user too.'));
      break;
  }
}

function og_expire_change_form_submit($form, &$form_state) {
  $expiredate = $form_state['values']['og_expire'];
  $expiretime = strtotime($expiredate);
  $nid = $form_state['values']['node'];
  $uid = $form_state['values']['account'];


  if ($expiretime) {
    og_expire_set($nid, $uid, $expiretime);
  }
  else {
    og_expire_set($nid, $uid, NULL);
  }
  drupal_goto('og/users/' . intval($nid));
}


/**
  * Implementation of hook_form_alter();
  *
  * Add expiration date field for OG add members page and redirect to our own callback.
  * Notify current user that expiration date will be deleted when promoting user to group admin.
  */
function og_expire_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'og_add_users') {
    $form['og_names']['#weight'] = -10;
    $form += _og_expire_form_item(time());
    $form['#submit'][] = 'og_expire_add_users_submit';
  }
  if ($form_id == 'og_create_admin_confirm') {
    $form['expiration'] = array('#type' => 'item', '#value' => t('Users membership expiration will be set to: Never'), '#weight' => -1);
    $form['#submit'][] = 'og_expire_create_admin_submit';
  }
}

/**
  * Callback for og_expire_form_alter().
  *
  * When promoting OG user to admin, remove his expiration date.
  */
function og_expire_create_admin_submit($form, &$form_state) {
  og_expire_set($form_state['values']['node']->nid, $form_state['values']['account']->uid, NULL);
}
  
/**
  * Callback for og_expire_add_users().
  *
  * Set expiration date for users added to a group.
  */
function og_expire_add_users_submit($form, &$form_state) {
  $expiredate = $form_state['values']['og_expire'];
  $expiretime = strtotime($expiredate);
  if ($expiretime) {

    // Taken from og_add_users_submit().
    $names = explode(',', $form_state['values']['og_names']);
    foreach ($names as $name) {
      $account = user_load(array('name' => trim($name)));
      if ($account->uid) {
        $accounts[] = $account;
      }
    }
    $og = $form_state['values']['gid'];
    foreach ($accounts as $account) {
      // Check if the user already has expiration date for this group.
      $existing = db_fetch_object(db_query("SELECT nid, uid FROM {og_expire} WHERE nid = %d AND uid = %d", $og, $account->uid));

      if ($existing->uid) {
        // Update users expiration for this group with new date.
        db_query("UPDATE {og_expire} SET expire = %d WHERE nid = %d AND uid = %d", $expiretime, $og, $account->uid);
      }
      else {
        // Set new expiration date for this user and group.
        db_query("INSERT INTO {og_expire}(nid, uid, expire) VALUES(%d, %d, %d)", $og, $account->uid, $expiretime);
      }
    }
  }
}
/**
  * Implementation of hook_views_api().
  */
function og_expire_views_api() {
  return array(
      'api' => 2,
      'path' => drupal_get_path('module', 'og_expire'),
      );
}

/**
 *  Implementation of hook_views_handlers().
 */
function og_expire_views_handlers() {
  return array(
      'info' => array(
        'path' => drupal_get_path('module', 'og_expire'),
        ),
      'handlers' => array(
        'views_handler_field_og_expire' => array(
          'parent' => 'views_handler_field',
          ),
        ),
      );
}



/**
  * API function to set expiration date for user in organic group. Sets given
  * $time as expiration date or deletes expiration date if $time is NULL.
  *
  * @param $og
  *  Organic group ID.
  * @param $uid
  *  User UID.
  * @param $time
  *  Unixtime - expiration date. Set NULL to delete expiration date for this user.
  *
  * @return 
  *  Returns FALSE if user doesn't have rights to change expiration date
  *  ('administer organic groups' permission), else returns TRUE.
  */
function og_expire_set($og, $uid, $time = NULL) {
  global $user;
  if (!user_access('administer organic groups') && !$user->og_groups[$og]['is_admin']) {
    // Don't allow changing the value for non group admins or non global organic groups admins.
    return FALSE;
  }

  if (!empty($time)) {
    // Check if the user already has expiration date for this group.
    $existing = db_fetch_object(db_query("SELECT nid, uid FROM {og_expire} WHERE nid = %d AND uid = %d", $og, $uid));

    if ($existing->uid) {
      // Update users expiration for this group with new date.
      db_query("UPDATE {og_expire} SET expire = %d, notified = 0 WHERE nid = %d AND uid = %d", $time, $og, $uid);
    }
    else {
      // Set new expiration date for this user and group.
      db_query("INSERT INTO {og_expire}(nid, uid, expire, notified) VALUES(%d, %d, %d, 0)", $og, $uid, $time);
    }
  }
  else {
    // Delete expiration date.
    db_query("DELETE FROM {og_expire} WHERE nid = %d AND uid = %d", $og, $uid);
  }
  return TRUE;
}

/**
  * API function to get expiration date for user in organic group.
  *
  * @param $og
  *  Organic group ID.
  * @param $uid
  *  User UID.
  *
  * @return 
  *  Returns unixtime or FALSE if no expiration date is set.
  */
function og_expire_get($og, $uid) {
  $existing = db_fetch_object(db_query("SELECT nid, uid, expire FROM {og_expire} WHERE nid = %d AND uid = %d", $og, $uid));
  return $existing->expire;
}

/**
  * Implementation of hook_cron().
 */
function og_expire_cron() {
  
  $admins_sql = og_list_users_sql(1, 1, NULL);
  
  if ($notice_time = variable_get('og_expire_send_notice', 0)) {
    // Notify users that their membership is about to expire.
    $query = db_query("SELECT nid, uid, expire FROM {og_expire} WHERE ((expire - %d) < %d) AND (notified IS NULL OR notified = 0)", $notice_time, $_SERVER['REQUEST_TIME']);
    $users = array();
    while ($row = db_fetch_object($query)) {
      db_query("UPDATE {og_expire} SET notified = %d WHERE nid = %d AND uid = %d", time(), $row->nid, $row->uid);
      $og = node_load($row->nid);
      $account = user_load(array('uid' => $row->uid));
      og_expire_notify_user('notify_advance', $row->expire, $og, $account);
      if (variable_get('og_expire_notify_admin', 0)) {
        og_expire_notify_admin('notify_advance_admin', $row->expire, $og, $account);
      }
    } // Notify admin end.
  } // Send notice end.

  // Expire memberships now.
  $query = db_query("SELECT oe.uid, ou.nid FROM {og_expire} oe LEFT JOIN {og_uid} ou ON oe.uid = ou.uid AND oe.nid = ou.nid WHERE ou.is_active = 1 AND ou.is_admin = 0 AND oe.expire <= %d", $_SERVER['REQUEST_TIME']);
  while ($row = db_fetch_object($query)) {
    if (variable_get('og_expire_action', 0)) {
      // Delete user membership.
      og_delete_subscription($row->nid, $row->uid);
    }
    else {
      // Set inactive. Also remove his expiration date or it will remove his membership again if admin approves him and cron runs in the same time.
      og_expire_set($row->nid, $row->uid, NULL);
      og_save_subscription($row->nid, $row->uid, array('is_active' => 0));
    }
    if (variable_get('og_expire_notify_after', 0)) {
      $og = node_load($row->nid);
      $account = user_load(array('uid' => $row->uid));
      og_expire_notify_user('notify_expired', $row->expire, $og, $account);

      if (variable_get('og_expire_notify_admin', 0)) {
        // Notify admin too.
        og_expire_notify_admin('notify_expired_admin', $row->expire, $og, $account);
      }
    }
  }
}

/**
  * Helper function to notify user of change in his membership.
  *
  * @param $mailkey
  *  Will be passed to hook_mail(). Identifies the mail.
  * @param $expire
  *  Expiration time. Might be used in mail text as $params['expiration'];
  * @param $og
  *  Organic group node.
  * @param $account
  *  User account of affected user.
  */
function og_expire_notify_user($mailkey, $expire, $og, $account) {
  $params['account'] = $account;
  $params['group'] = $og->title;
  $params['expiration'] = format_date($expire, 'small');
  drupal_mail('og_expire', $mailkey, $account->mail, user_preferred_language($account), $params);
}

/**
  * Helper function to notify admin of change in og_expire.
  * Send email to every $og administrator notifying him of a change in $account.
  *
  * @param $mailkey
  *  Will be passed to hook_mail(). Identifies the mail.
  * @param $expire
  *  Expiration time. Might be used in mail text as $params['expiration'];
  * @param $og
  *  Organic group node.
  * @param $account
  *  User account of affected user.
  * 
  */
function og_expire_notify_admin($mailkey, $expire, $og, $account) {
  $admins = db_query(og_list_users_sql(1, 1, NULL), $og->nid);
  while ($admin = db_fetch_object($admins)) {
    $admin_user = user_load(array('uid' => $admin->uid));
    $params['admin_user'] = $admin_user;
    $params['account'] = $account;
    $params['expiration'] = format_date($expire, 'small');
    $params['group'] = $og->title;
    drupal_mail('og_expire', $mailkey, $admin_user->mail, user_preferred_language($admin_user), $params);
  }
}

/**
  * Implementation of hook_mail().
  */
function og_expire_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  switch ($key) {
    case 'notify_advance':
      $message['subject'] = t('Your membership in @group is about to expire', array('@group' => $params['group']), $language->language);
      $message['body'] = t("Dear @username\n\nYour membership in @group is about to expire at @date.\n\nPlease contact website administrators to prolong your membership.", array('@username' => $params['account']->name, '@group' => $params['group'], '@date' => $params['expiration']), $language->language);
      break;
    case 'notify_advance_admin':
      $message['subject'] = t('Membership of @user in @group is about to expire', array('@user' => $params['account']->name, '@group' => $params['group']), $language->language);
      $message['body'] = t("Dear @username\n\n@user membership in @group is about to expire at @date.", array('@user' => $params['account']->name, '@username' => $params['admin_user']->name, '@group' => $params['group'], '@date' => $params['expiration']), $language->language);
      break;
    case 'notify_expired':
      $message['subject'] = t('Your membership in @group just expired', array('@group' => $params['group']), $language->language);
      $message['body'] = t("Dear @username\n\nYour membership in @group just expired.\n\nPlease contact website administrators to prolong your membership.", array('@username' => $params['account']->name, '@group' => $params['group'], $language->language));
      break;
    case 'notify_expired_admin':
      $message['subject'] = t('Membership of @user in @group just expired', array('@user' => $params['account']->name, '@group' => $params['group']), $language->language);
      $message['body'] = t("Dear @username\n\n@user membership in @group just expired.", array('@user' => $params['account']->name, '@username' => $params['admin_user']->name, '@group' => $params['group'], $language->language));
      break;


  }
}
