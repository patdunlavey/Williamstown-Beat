<?php
// $Id: data_taxonomy.module,v 1.1.2.16 2010/01/25 18:10:45 alexb Exp $
/**
 * @file
 * Hooks and API functions for Data Node module.
 */

/**
 * Implementation of hook_views_api().
 */
function data_taxonomy_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'data_taxonomy') .'/views',
  );
}

/**
 * Implementation of hook_menu().
 */
function data_taxonomy_menu() {
  $items = array();
  $items['data-taxonomy/ajax-save'] = array(
    'page callback' => 'data_taxonomy_ajax_save',
    'page arguments' => array(),
    'access arguments' => array('edit data taxonomy relations'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/data/edit/%data_ui_table/taxonomy'] = array(
    'title' => 'Relate to taxonomy',
    'description' => 'Administer data tables.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('data_taxonomy_settings_form', 4),
    'file' => 'data_taxonomy.admin.inc',
    'access arguments' => array('administer data tables'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function data_taxonomy_theme() {
  return array(
    'data_taxonomy_tagging_form' => array(
      'arguments' => array('form' => array()),
      'path' => drupal_get_path('module', 'data_taxonomy') . '/theme',
      'template' => 'data-taxonomy-tagging-form',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function data_taxonomy_perm() {
  return array('edit data taxonomy relations');
}

/**
 * Implementation of hook_feeds_data_processor_targets_alter().
 */
function data_taxonomy_feeds_data_processor_targets_alter(&$fields, $data_table) {
  if ($info = data_taxonomy_get_info($data_table)) {
    foreach ($info['vocabularies'] as $vid) {
      $vocabulary = taxonomy_vocabulary_load($vid);
      $fields['data_taxonomy:'. $vid] = array(
        'name' => t('Taxonomy: @vocabulary', array("@vocabulary" => $vocabulary->name)),
        'description' => t('Map to taxonomy terms of @vocabulary vocabulary.', array("@vocabulary" => $vocabulary->name)),
      );
    }
  }
}

/**
 * Implementation of hook_data_insert().
 */
function data_taxonomy_data_insert($record, $table_name) {
  if ($info = data_taxonomy_get_info($data_table)) {
    $id = $record[$info['id']];
    foreach ($info['vocabularies'] as $vid) {
      if (is_array($record['data_taxonomy:'. $vid])) {
        foreach ($record['data_taxonomy:'. $vid] as $tid) {
          db_query("INSERT INTO {data_taxonomy}(id, data_table_name, tid) VALUES(%d, '%s', %d)", $id, $table_name, $tid);
        }
      }
    }
  }
}

/**
 * Implementation of hook_data_delete_query_alter().
 */
function data_taxonomy_data_delete_query_alter($query, $table_name) {
  if ($info = data_taxonomy_get_info($table_name)) {
    $table_name = db_escape_table($table_name);
    $query->addSubject('data_taxonomy');
    $query->addJoin('data_taxonomy', "$table_name.{$info['id']} = data_taxonomy.id AND data_taxonomy.data_table_name = '$table_name'", 'LEFT JOIN');
  }
}

/**
 * Implementation of hook_data_update().
 */
function data_taxonomy_data_update($record, $table_name) {
  if ($info = data_taxonomy_get_info($data_table)) {
    $id = $record[$info['id']];
    foreach ($info['vocabularies'] as $vid) {
      if (is_array($record['data_taxonomy:'. $vid])) {
        db_query("DELETE dt FROM {data_taxonomy} dt JOIN {term_data} td ON dt.tid = td.tid WHERE td.vid = %d", $vid);
        foreach ($record['data_taxonomy:'. $vid] as $tid) {
          db_query("INSERT INTO {data_taxonomy}(id, data_table_name, tid) VALUES(%d, '%s', %d)", $id, $table_name, $tid);
        }
      }
    }
  }
}

/**
 * Get data_taxonomy information for a given data table.
 */
function data_taxonomy_get_info($data_table) {
  static $info;
  if (empty($info)) {
    $meta = data_get_table($data_table)->get('meta');
    if (is_array($meta['data_taxonomy'])) {
      $info = $meta['data_taxonomy'];
    }
  }
  return $info;
}

/**
 * Form callback for tagging.
 */
function data_taxonomy_tagging_form(&$form_state, $vid, $id, $data_table, $path, $args) {
  $access = user_access('edit data taxonomy relations');
  $form = array('#theme' => 'data_taxonomy_tagging_form');
  $form['vid'] = array(
    '#type' => 'hidden',
    '#value' => $vid,
    '#access' => $access,
  );
  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $id,
    '#access' => $access,
  );
  $form['data_table'] = array(
    '#type' => 'hidden',
    '#value' => $data_table,
    '#access' => $access,
  );
  $form['path'] = array(
    '#type' => 'hidden',
    '#value' => $path,
    '#access' => $access,
  );
  $form['args'] = array(
    '#type' => 'hidden',
    '#value' => implode('&', $args),
    '#access' => $access,
  );
  $result = db_query('SELECT td.tid, td.name, td.vid FROM {term_data} td JOIN {data_taxonomy} dt ON td.tid = dt.tid WHERE dt.data_table_name = "%s" AND dt.id = %d AND td.vid = %d', $data_table, $id, $vid);
  $tags = $terms = array();
  while ($term = db_fetch_object($result)) {
    $tags[$term->tid] = $term->name;
    $terms[$term->tid] = $term;
  }
  $form['tags'] = array(
    '#type' => 'textfield',
    '#default_value' => implode(', ', $tags),
    '#autocomplete_path' => 'taxonomy/autocomplete/'. $vid,
    '#id' => "edit-tags-data-taxonomy-{$vid}-{$id}",
    '#access' => $access,
  );

  // Ensure our path gets rewritten. We don't use url() here because we're
  // not interested in rewrites to parts of the request other than $_GET['q'].
  $ajax_path = 'data-taxonomy/ajax-save';
  if (function_exists('custom_url_rewrite_outbound')) {
    $original_path = $ajax_path;
    $options = array();
    custom_url_rewrite_outbound($ajax_path, $options, $original_path);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#access' => $access,

    // AHAH stack: We need to assign our submit button its own ID as auto
    // assignment will quickly lead to a situation where our AJAX form button
    // has a different ID from the original.
    '#id' => "edit-submit-data-taxonomy-{$vid}-{$id}",
    '#ahah' => array(
      'path' => $ajax_path,
      'wrapper' => "data-taxonomy-tags-{$vid}-{$id}",
      'method' => 'replace',
      'effect' => 'none',
    ),
  );

  // Pass on key elements for theming.
  $form['#terms'] = $terms;
  $form['#path'] = $path;
  $form['#args'] = $args;
  if ($access) {
    $form['#edit'] = l(t('Edit'), $_GET['q'], array('fragment' => 'data-taxonomy-edit', 'attributes' => array('class' => 'data-taxonomy-edit')));
  }
  $form['#vocab'] = taxonomy_vocabulary_load($vid);
  return $form;
}

/**
 * Submit handler.
 */
function data_taxonomy_tagging_form_submit($form, &$form_state) {
  // Using clicked_button allows us to use more than one of the same form on
  // a screen.
  $post = $form_state['clicked_button']['#post'];
  $tids = data_taxonomy_save_terms($form_state['values']['tags'], $post['vid']);
  data_taxonomy_save_relations($post['vid'], $post['id'], $post['data_table'], $tids);
}

/**
 * Save term_data - data table relationships in data_taxonomy table.
 */
function data_taxonomy_save_relations($vid, $id, $data_table, $tids) {
  db_query("DELETE dt FROM {data_taxonomy} dt JOIN {term_data} td ON dt.tid = td.tid WHERE dt.id = %d AND dt.data_table_name = '%s' AND td.vid = %d", $id, $data_table, $vid);
  foreach ($tids as $tid) {
    db_query('INSERT INTO {data_taxonomy} (id, data_table_name, tid) VALUES (%d, "%s", %d)', $id, $data_table, $tid);
  }
}

/**
 * Explode terms from typed input, create new terms.
 *
 * @todo: This should actually live in taxonomy module.
 *
 * @return
 *   Array of tids corresponding to the terms in typed_input.
 */
function data_taxonomy_save_terms($typed_input, $vid) {
  $typed_terms = drupal_explode_tags($typed_input);

  $tids = array();
  foreach ($typed_terms as $typed_term) {
    // See if the term exists in the chosen vocabulary
    // and return the tid; otherwise, add a new record.
    $possibilities = taxonomy_get_term_by_name($typed_term);
    $typed_term_tid = NULL; // tid match, if any.
    foreach ($possibilities as $possibility) {
      if ($possibility->vid == $vid) {
        $typed_term_tid = $possibility->tid;
        $term = $possibility;
        break;
      }
    }

    if (!$typed_term_tid) {
      $term = array('vid' => $vid, 'name' => $typed_term);
      $status = taxonomy_save_term($term);
      $typed_term_tid = $term['tid'];
    }

    // Cast the edit as an object as though it were retrieved from the DB.
    $tids[$typed_term_tid] = (object) $term;
  }
  return $tids;
}

/**
 * AHAH callback for saving terms.
 *
 * @todo: Verify form token.
 */
function data_taxonomy_ajax_save() {
  $cached_form_state = array();
  $files = array();
  $cached_form = form_get_cache($_POST['form_build_id'], $cached_form_state);
  if ($cached_form['form_token']['#default_value'] == $_POST['form_token']) {
    // Rebuild $form_state['values'].
    $form_state = array('values' => $_POST);
    foreach (element_children($cached_form) as $elem) {
      if ($cached_form[$elem]['#type'] === 'value' && isset($cached_form[$elem]['#value'])) {
        $form_state['values'][$elem] = $cached_form[$elem]['#value'];
      }
    }

    // Process and save terms & relations.
    $values = $form_state['values'];
    $terms = data_taxonomy_save_terms($values['tags'], $values['vid']);
    data_taxonomy_save_relations($values['vid'], $values['id'], $values['data_table'], array_keys($terms));
    drupal_json(array('status' => 1, 'data' => theme('links', data_taxonomy_tag_links($terms, $_POST['path'], explode('&', $_POST['args'])), array('class' => 'links data-taxonomy-tags'))));
    exit;
  }
  drupal_json(array('status' => 1, 'data' => 'Error submitting form'));
  exit;
}

/**
 * Generate a links array suitable for use with theme('links') from an array of
 * taxonomy terms.
 *
 * @param $terms
 *   An array of terms.
 * @param $path
 *   The path template to use (e. g. path/%/!tid/%)
 * @param $args
 *   The arguments to use in the path template, used to replace %'s in $path.
 */
function data_taxonomy_tag_links($terms, $path, $args) {
  $tags = array();
  $path = _data_taxonomy_replace_tokens($path, $args);
  foreach ($terms as $tid => $term) {
    $tags[] = array(
      'title' => $term->name,
      'href' => str_replace('!term', $term->name, str_replace('!tid', $term->tid, $path)),
    );
  }
  return $tags;
}

/**
 * Replaces % in $path with arguments.
 *
 * @todo: Replace missing % not with 'all' but with value depending on argument
 * setting.
 *
 * @param $path
 *   A path template like path/%/!tid/%
 * @param $args
 *   An array of arguments used to replace % characters in path.
 * @return
 *   A path with replaced tokens like path/arg1/!tid/arg2
 */
function _data_taxonomy_replace_tokens($path, $args) {
  if (is_array($args)) {
    $args = array_filter($args);
    $pos = strpos($path, '%');
    while ($pos !== FALSE && count($args)) {
      $path = substr_replace($path, array_shift($args), $pos, 1);
      $pos = strpos($path, '%');
    }
  }
  $path = str_replace('%', 'all', $path);
  return $path;
}

/**
 * Preprocessor for theme('data_taxonomy_tagging_form').
 */
function template_preprocess_data_taxonomy_tagging_form(&$vars) {
  drupal_add_js(drupal_get_path('module', 'data_taxonomy') .'/theme/data_taxonomy.js');
  drupal_add_css(drupal_get_path('module', 'data_taxonomy') .'/theme/data_taxonomy.css');
  $vars['label'] = $vars['form']['#vocab']->name;
  if ($vars['form']['#edit']) {
    $vars['edit'] = $vars['form']['#edit'];
  }
  $vars['tags'] = theme('links', data_taxonomy_tag_links($vars['form']['#terms'], $vars['form']['#path'], $vars['form']['#args']), array('class' => 'links data-taxonomy-tags'));
}
